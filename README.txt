# AnalyticalEngine

AnalyticalEngine - это библиотека на Python для математических вычислений, вдохновленная Аналитической машиной Чарльза Бэббиджа. Она предоставляет инструменты для численного анализа, комплексной арифметики и визуализации данных.

## Возможности

### Модуль Core
- **Комплексные числа**: Собственная реализация комплексных чисел в прямоугольной (действительная + мнимая) и полярной (модуль + угол) формах.
  - Поддержка арифметических операций: сложение, вычитание, умножение, деление, возведение в степень.
  - Преобразования между прямоугольной и полярной формами.
  - Операции с целыми числами и числами с плавающей точкой.
  - Вычисление модуля (абсолютного значения) и проверка равенства.

### Модуль Algorithms
- **Численные методы**: Классы для решения обыкновенных дифференциальных уравнений (ОДУ).
  - Метод Эйлера
  - Метод Рунге-Кутты 4-го порядка
  - Аналитическое решение с построением графиков
  - Интеграция с использованием SciPy для продвинутого решения
- **Digits**: Утилита для представления π в градусных дробях.

### Модуль Visualization
- **2D-визуализация**: Простой класс на основе matplotlib для построения 2D-графиков с интерактивным отображением.

### Тесты
- Полный набор тестов для всех модулей, включая примеры решения ОДУ с визуализацией.

## Установка

1. Убедитесь, что установлен Python 3.x.
2. Установите зависимости: `pip install matplotlib numpy scipy`
3. Клонируйте или скачайте репозиторий.
4. Добавьте корневую папку проекта в путь Python или установите как пакет.

## Использование

### Комплексные числа
```python
from core.complex_numbers import complex, trigcomplex

# Прямоугольная форма
a = complex(1, 2)  # 1 + 2i
b = complex(3, 4)  # 3 + 4i
print(a + b)  # Сложение
print(a * b)  # Умножение

# Полярная форма
c = trigcomplex(5, 45)  # Модуль 5, угол 45 градусов
print(c.trig_to_complex())  # Преобразование в прямоугольную

# Преобразования
print(a.complex_to_trig())  # В полярную
```

### Численные методы
```python
from algorithms.NumericalMethods import NumericalMethods

def f(x, y):
    return y - x**2  # Пример ОДУ: dy/dx = y - x^2

x_vals, y_vals = NumericalMethods.euler_method(f, 0, 1, 2, step=0.1)
print(x_vals, y_vals)
```

### Визуализация
```python
from visualization.d2 import plotter2d
import matplotlib.pyplot as plt

plotter = plotter2d()
plt.plot([1, 2, 3], [1, 4, 9])
plotter.show()
```

## Запуск тестов

Запустите файлы тестов в папке `tests/`:
- `python tests/test.py` для общих тестов.
- `python tests/test_complex.py` для тестов комплексных чисел.

## Структура проекта

- `core/`: Основные математические классы (комплексные числа).
- `algorithms/`: Численные алгоритмы и утилиты.
- `visualization/`: Инструменты визуализации.
- `tests/`: Наборы тестов.
- `data_structures/`: (Пусто, для будущих структур данных).
- `examples/`: (Пусто, для примеров скриптов).
- `LICENSE`: Лицензия MIT.

## Вклад в проект

Вы можете внести свой вклад, добавляя функции, исправляя ошибки или улучшая документацию. Убедитесь, что тесты проходят перед отправкой.

## Лицензия

Лицензия MIT - см. файл LICENSE для деталей.

## Контакты

Если у вас есть вопросы или предложения, свяжитесь с автором: ptr734876.
